version: 2

aliases:
  # Workflow filters
  - &filter-only-master
    branches:
      only: master

jobs:
  build_plugin:
    docker:
    - image: circleci/node:12
    working_directory: ~/plugin
    steps:
    - checkout
    - restore_cache:
        keys:
        - yarn-packages-{{ checksum "yarn.lock" }}
    - run:
        name:  Download cc-test-reporter
        command: |
          mkdir -p tmp/
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./tmp/cc-test-reporter
          chmod +x ./tmp/cc-test-reporter
    - run:
        name: Install Node packages
        command: |
          yarn install --pure-lockfile
    - run:
        name: Run Toolkit Build
        command: |
          ./tmp/cc-test-reporter before-build
          npx grafana-toolkit plugin:ci-build
          # symlink to coverage
          ln -s ci/jobs/build_plugin/coverage
          ls -al coverage
          ./tmp/cc-test-reporter after-build --debug --coverage-input-type lcov
          ls -al
          ls -al coverage
    #- run:
    #    name: Run coverage report
    #    command: |
    #      ./tmp/cc-test-reporter format-coverage -t lcov -o tmp/codeclimate.frontend.json ci/jobs/build_plugin/coverage/lcov.info
    #- run:
    #    name: Install JUnit coverage reporter
    #    command: sudo yarn global add jest
    #- run:
    #    name: Run tests with JUnit as reporter
    #    command: jest --ci --runInBand --reporters=default --reporters=jest-junit
    #    environment:
    #      JEST_JUNIT_OUTPUT_DIR: "test-results/jest/results.xml"
    - save_cache:
        paths:
        - node_modules
        key: yarn-packages-{{ checksum "yarn.lock" }}
    - persist_to_workspace:
        root: .
        paths:
        - ci
        - tmp
    #- store_test_results:
    #    path: test-results

  upload_coverage:
    docker:
    - image:  circleci/circleci-cli:alpine
    #  environment:
    #    CC_TEST_REPORTER_ID: add_this_to_circleci_config
    working_directory: ~/plugin
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Upload coverage results to Code Climate
          command: |
            ./tmp/cc-test-reporter sum-coverage tmp/codeclimate.frontend.json -d -p 1 -o tmp/codeclimate.total.json
            ./tmp/cc-test-reporter upload-coverage -i tmp/codeclimate.total.json

  build_docs:
    docker:
    - image: circleci/node:12
    working_directory: ~/plugin
    steps:
    - checkout
    - restore_cache:
        keys:
        - yarn-packages-{{ checksum "yarn.lock" }}
    - run:
        name: Initialize CI
        command: mkdir -p ci # Avoid error if not exists
    - run:
        name: Build Docs
        command: npx grafana-toolkit plugin:ci-docs
    - save_cache:
        paths:
        - node_modules
        key: yarn-packages-{{ checksum "yarn.lock" }}
    - persist_to_workspace:
        root: .
        paths:
        - ci

  package:
    docker:
    - image: circleci/node:12
    working_directory: ~/plugin
    steps:
    - checkout
    - attach_workspace:
        at: .
    - restore_cache:
        keys:
        - yarn-packages-{{ checksum "yarn.lock" }}
    - run:
        name: Package Distribution
        command: npx grafana-toolkit plugin:ci-package
    - persist_to_workspace:
        root: .
        paths:
        - ci
    - store_artifacts:
        path: ci/packages

  test_6_5_2:
    docker:
    - image: circleci/node:12-browsers
    working_directory: ~/plugin
    steps:
    - checkout
    - attach_workspace:
        at: .
    - restore_cache:
        keys:
        - yarn-packages-{{ checksum "yarn.lock" }}
    - run:
        name: Setup Grafana (local install)
        command: |
          wget https://dl.grafana.com/oss/release/grafana_6.5.2_amd64.deb
          sudo apt-get install -y adduser libfontconfig1
          sudo dpkg -i grafana_6.5.2_amd64.deb
          sudo apt-get install locate
          sudo updatedb
          sudo locate grafana
          sudo cat /etc/grafana/grafana.ini
          sudo echo ------------------------
          sudo cp ci/grafana-test-env/custom.ini /usr/share/grafana/conf/custom.ini
          sudo cp ci/grafana-test-env/custom.ini /etc/grafana/grafana.ini
          sudo service grafana-server start
          sudo grafana-cli --version
    - run:
        name: Run e2e tests
        command: |
          npx grafana-toolkit plugin:ci-test
    - persist_to_workspace:
        root: .
        paths:
        - ci/jobs/test_6_5_2
    - store_test_results:
        path: ci/jobs/test_6_5_2
    - store_artifacts:
        path: ci/jobs/test_6_5_2

  report:
    docker:
    - image: circleci/node:12
    working_directory: ~/plugin
    steps:
    - checkout
    - attach_workspace:
        at: .
    - restore_cache:
        keys:
        - yarn-packages-{{ checksum "yarn.lock" }}
    - run:
        name: Toolkit Report
        command: npx grafana-toolkit plugin:ci-report
    - store_artifacts:
        path: ci

  publish_github_release:
    working_directory: ~/briangann-dotdiagram-panel
    docker:
      - image: cibuilds/github:0.13
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "47:23:e5:fd:6f:72:fa:85:23:9b:3d:d0:b9:ee:ca:43"
      - attach_workspace:
          at: .
      - run:
          name: "Publish Release on GitHub"
          command: |
            PLUGIN_NAME=briangann-dotdiagram-panel
            # copy ci dist
            cp -r ci/jobs/build_plugin/dist .
            # copy ci artifacts
            mkdir -p artifacts
            cp -r ci/packages/* artifacts
            apk add --update --no-cache jq
            RELEASE_NOTES=`awk 'BEGIN {FS="##"; RS=""} FNR==3 {print; exit}' CHANGELOG.md`
            VERSION=`cat dist/plugin.json|jq '.info.version'| sed s/\"//g`
            ls -al
            ls -al ./artifacts
            git config user.email "bkgann@gmail.com"
            git config user.name "CircleCI Automation"
            git checkout -b release-${VERSION}
            git add --force dist/
            git add artifacts/
            git commit -m "automated release $VERSION [skip ci]"
            git push -f origin release-${VERSION}
            git tag -f v${VERSION}
            git push -f origin v${VERSION}
            ghr \
              -t ${GITHUB_TOKEN} \
              -u ${CIRCLE_PROJECT_USERNAME} \
              -r ${CIRCLE_PROJECT_REPONAME} \
              -c ${CIRCLE_SHA1} \
              -n "${PLUGIN_NAME} v${VERSION}" \
              -b "${RELEASE_NOTES}" \
              -delete \
              v${VERSION} \
              ./artifacts/
workflows:
  version: 2
  plugin_workflow:
    jobs:
    - build_plugin
    - build_docs:
        requires:
        - build_plugin
    - upload_coverage:
        requires:
        - build_plugin
    - package:
        requires:
        - build_docs
        - upload_coverage
    - test_6_5_2:
        requires:
        - package
    - report:
        requires:
        - test_6_5_2
    - approve_release:
        type: approval
        requires:
          - report
        filters: *filter-only-master
    - publish_github_release:
        requires:
          - approve_release
        filters: *filter-only-master
